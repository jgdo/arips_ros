#!/usr/bin/env python

import serial
import rospy
import atexit
from parse import parse

from sensor_msgs.msg import BatteryState
from std_msgs.msg import Bool

serial_device: serial.Serial
battery_on = False

def battery_command_callback(data: Bool):
    global battery_on
    battery_on = data.data

def battery_loop():
    global serial_device
    global battery_on

    rospy.init_node('battery_node')
    pub = rospy.Publisher('battery_state', BatteryState, queue_size=10)
    battery_device_path = rospy.get_param('~battery_device', '/dev/arips_battery_controller')
    serial_device = serial.Serial(battery_device_path, 115200, timeout=1)
    rospy.Subscriber("battery_command", Bool, battery_command_callback)

    atexit.register(lambda: serial_device.write(b'0'))

    battery_on = rospy.get_param('~battery_on', False)

    rospy.loginfo("Connected to battery controller at {}".format(battery_device_path))
    rospy.loginfo("Initial battery state is {}".format("ON" if battery_on else "OFF"))

    while not rospy.is_shutdown():
        line = serial_device.readline().decode("utf-8")
        
        # print(f'Line: {line}')

        bat_state = BatteryState()
        parsed_data = parse(
            "charge:{},battery:{},chargeRelay:{},robotPower:{}", line)

        if not parsed_data:
            rospy.logwarn("Could not parse '{}'".format(line))
            continue

        try:
            charging_voltage, battery_voltage, relay, power_on = map(lambda x: float(x), parsed_data)
        except ValueError:
            rospy.logwarn("Could not get values from {}".format(parsed_data))
            continue

        bat_state.header.stamp = rospy.Time.now()
        bat_state.voltage = battery_voltage
        bat_state.current = float('nan')
        bat_state.charge = float('nan')
        bat_state.capacity = 9.0
        bat_state.design_capacity = bat_state.capacity
        bat_state.percentage = float('nan')
        bat_state.power_supply_status = BatteryState.POWER_SUPPLY_STATUS_CHARGING if charging_voltage > 10 \
            else BatteryState.POWER_SUPPLY_STATUS_DISCHARGING  # TODO hardcoded
        bat_state.power_supply_health = BatteryState.POWER_SUPPLY_HEALTH_GOOD
        bat_state.power_supply_technology = BatteryState.POWER_SUPPLY_TECHNOLOGY_LION
        bat_state.present = battery_voltage > 5  # TODO hardcoded
        bat_state.location = "rear"

        pub.publish(bat_state)

        serial_device.write(b'1' if battery_on else b'0')


if __name__ == '__main__':
    try:
        battery_loop()
    except rospy.ROSInterruptException:
        pass
